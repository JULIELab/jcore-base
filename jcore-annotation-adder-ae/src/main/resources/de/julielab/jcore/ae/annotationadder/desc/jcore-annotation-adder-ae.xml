<?xml version='1.0' encoding='UTF-8'?>
<analysisEngineDescription xmlns="http://uima.apache.org/resourceSpecifier">
    <frameworkImplementation>org.apache.uima.java</frameworkImplementation>
    <primitive>true</primitive>
    <annotatorImplementationName>de.julielab.jcore.ae.annotationadder.AnnotationAdderAnnotator</annotatorImplementationName>
    <analysisEngineMetaData>
        <name>JCoRe Annotation Adder</name>
        <description>This component helps to import annotations made on the exact CAS document text by an external process back into the CAS. To this end, the component is prepared to read several data formats. Currently, simple offset-based annotations are supported with configurable UIMA types. The component supports character and token based offsets.</description>
        <version>2.6.0-SNAPSHOT</version>
        <configurationParameters>
            <configurationParameter>
                <name>OffsetMode</name>
                <description>Determines the interpretation of annotation offsets. Possible values: "CHARACTER" and "TOKEN". For the TOKEN offset mode, the correct tokenization must be given in the CAS. TOKEN offsets start with 1, CHARACTER offsets are 0-based. Defaults to CHARACTER.</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>DefaultUimaType</name>
                <description>Most external annotation formats require that the qualified name a UIMA type is provided which reflects the annotation to be created for the respective annotation. With this parameter, a default type can be provided which will be forwarded to the format parser. If the parser supports it, the type can then be omitted from the external annotation source.</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>PreventProcessedMarkOnDigestMismatch</name>
                <description>This setting is only in effect if an input format is used that contains document text SHA256 digests while also writing the annotation results into a JeDIS database. If then a CAS document text, to which annotations should be added, does not match the digest given by an annotation, this CAS will not marked as being finished processing by DBCheckpointAE that may follow in the pipeline. The idea is that the mismatched documents require a reprocessing of the original annotation creation algorithm because their text has been changed relative to the annotation on file. By not setting the document as being finished processed, it is straightforward to process only those documents again that failed to add one or multiple annotations.</description>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
        </configurationParameters>
        <configurationParameterSettings>
            <nameValuePair>
                <name>OffsetMode</name>
                <value>
                    <string>CHARACTER</string>
                </value>
            </nameValuePair>
        </configurationParameterSettings>
        <typeSystemDescription>
            <imports>
                <import name="de.julielab.jcore.types.jcore-document-meta-types" />
                <import name="de.julielab.jcore.types.jcore-morpho-syntax-types" />
                <import name="de.julielab.jcore.types.jcore-semantics-biology-types" />
                <import name="de.julielab.jcore.types.extensions.jcore-document-meta-extension-types" />
            </imports>
        </typeSystemDescription>
        <fsIndexCollection />
        <capabilities />
        <operationalProperties>
            <modifiesCas>true</modifiesCas>
            <multipleDeploymentAllowed>true</multipleDeploymentAllowed>
            <outputsNewCASes>false</outputsNewCASes>
        </operationalProperties>
    </analysisEngineMetaData>
    <externalResourceDependencies>
        <externalResourceDependency>
            <key>AnnotationSource</key>
            <description>A provider of annotations to add to the CAS. Must implement the de.julielab.jcore.ae.annotationadder.annotationsources.AnnotationProvider interface.</description>
            <interfaceName>de.julielab.jcore.ae.annotationadder.annotationsources.AnnotationProvider</interfaceName>
            <optional>false</optional>
        </externalResourceDependency>
    </externalResourceDependencies>
    <resourceManagerConfiguration>
        <externalResources>
            <externalResource>
                <name>Annotation Source file</name>
                <description>A configurable resource for annotations.</description>
                <configurableDataResourceSpecifier>
                    <url />
                    <resourceMetaData>
                        <name />
                        <configurationParameters>
                            <configurationParameter>
                                <name>AnnotationFormatClass</name>
                                <description>The qualified class name of the annotation file format parser. Defaults to 'de.julielab.jcore.ae.annotationadder.annotationformat.SimpleTSVEntityAnnotationFormat'.</description>
                                <type>String</type>
                                <multiValued>false</multiValued>
                                <mandatory>false</mandatory>
                            </configurationParameter>
                        </configurationParameters>
                        <configurationParameterSettings>
                            <nameValuePair>
                                <name>AnnotationFormatClass</name>
                                <value>
                                    <string>de.julielab.jcore.ae.annotationadder.annotationformat.SimpleTSVEntityAnnotationFormat</string>
                                </value>
                            </nameValuePair>
                            </configurationParameterSettings>
                    </resourceMetaData>
                </configurableDataResourceSpecifier>
                <implementationName>de.julielab.jcore.ae.annotationadder.annotationsources.InMemoryFileTextAnnotationProvider</implementationName>
            </externalResource>
        </externalResources>
        <externalResourceBindings>
            <externalResourceBinding>
                <key>AnnotationSource</key>
                <resourceName>Annotation Source file</resourceName>
            </externalResourceBinding>
        </externalResourceBindings>
    </resourceManagerConfiguration>
</analysisEngineDescription>