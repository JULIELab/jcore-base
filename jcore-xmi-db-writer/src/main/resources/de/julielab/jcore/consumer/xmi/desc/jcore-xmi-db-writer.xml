<?xml version="1.0" encoding="UTF-8"?>
<analysisEngineDescription xmlns="http://uima.apache.org/resourceSpecifier">
  <frameworkImplementation>org.apache.uima.java</frameworkImplementation>
  <primitive>true</primitive>
  <annotatorImplementationName>de.julielab.jcore.consumer.xmi.XMIDBWriter</annotatorImplementationName>
  <analysisEngineMetaData>
    <name>XMIDBWriter</name>
    <description>The StoreEntireXmiData-Parameter specifies if the entire cas should be stored. If not, annotations have to be specified that will be selected for separate storage. The annotations should be given as fully qualified java names (e.g. de.julielab.jules.types.Token). If the short name of the type ist given (e.g. Token), the fully qualified java name will be retrieved from the types namespace. The DocumentTable-Parameter is mandatory and indicates the name of the table where the document xmi will be stored or where the next possible xmi id is updated. The first element in the TableSchemas-Parameter has to be the schema for the document table. If annotations will be stored, the second element has to be the schema for the annotation tables. Additionally to the specified annotations the base document can be stored as well (StoreBaseDocument-Parameter). In this case FirstAnnotationType-Parameter has to indicate which annotation is the first element that does not belong to the base document.</description>
    <version>1.0</version>
    <vendor>JULIE Lab, Germany</vendor>
    <configurationParameters>
      <configurationParameter>
        <name>CostosysConfigFile</name>
        <description>File path to the DataBaseConnector configuration file.</description>
        <type>String</type>
        <multiValued>false</multiValued>
        <mandatory>true</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>PerformGZIP</name>
        <description>If set to true, the XMI data will be entered into the database GZIPed.</description>
        <type>Boolean</type>
        <multiValued>false</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>StoreEntireXmiData</name>
        <type>Boolean</type>
        <multiValued>false</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>DocumentTable</name>
        <type>String</type>
        <multiValued>false</multiValued>
        <mandatory>true</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>AnnotationsToStore</name>
        <type>String</type>
        <multiValued>true</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>StoreRecursively</name>
        <type>Boolean</type>
        <multiValued>false</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>AnnotationTableSchema</name>
        <type>String</type>
        <multiValued>false</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>UpdateMode</name>
        <type>Boolean</type>
        <multiValued>false</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>StoreBaseDocument</name>
        <type>Boolean</type>
        <multiValued>false</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
      <configurationParameter>
        <name>BaseDocumentAnnotationTypes</name>
        <type>String</type>
        <multiValued>true</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
    <configurationParameter>
        <name>DeleteObsoleteAnnotations</name>
        <description>Boolean parameter that indicates whether annotations, that have become obsolete by updating referenced annotations, should be deleted from their table. This can help to avoid errors when there is a chance that the obsolete annotations could be read later, leading to invalid XMI. However, when those annotations will just be updated next, the overhead of deleting them would not be necessary. Defaults to 'false'.</description>
        <type>Boolean</type>
        <multiValued>false</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
    <configurationParameter>
        <name>IncreasedAttributeSize</name>
        <description>UIMA XMI serialization stores the document text as an XML attribute to the 'sofa' element.  Some XML parsers - e.g. Woodstox - impose a maximum size of bytes allowed in attribute values. Thus, for large documents an exception might be thrown when trying to split them via the XMI splitter. This parameter allows to set the maximum attribute size in order to circumvent the error.</description>
        <type>Integer</type>
        <multiValued>false</multiValued>
        <mandatory>false</mandatory>
      </configurationParameter>
    </configurationParameters>
    <configurationParameterSettings>
      <nameValuePair>
        <name>PerformGZIP</name>
        <value>
          <boolean>false</boolean>
        </value>
      </nameValuePair>
    <nameValuePair>
        <name>DeleteObsoleteAnnotations</name>
        <value>
          <boolean>false</boolean>
        </value>
      </nameValuePair>
    </configurationParameterSettings>
    <typeSystemDescription>
      <imports>
        <import name="de.julielab.jcore.types.jcore-xmi-splitter-types"/>
      </imports>
    </typeSystemDescription>
    <typePriorities/>
    <fsIndexCollection/>
    <capabilities>
      <capability>
        <inputs/>
        <outputs/>
        <languagesSupported/>
      </capability>
    </capabilities>
    <operationalProperties>
      <modifiesCas>false</modifiesCas>
      <multipleDeploymentAllowed>true</multipleDeploymentAllowed>
      <outputsNewCASes>false</outputsNewCASes>
    </operationalProperties>
  </analysisEngineMetaData>
  <resourceManagerConfiguration/>
</analysisEngineDescription>
