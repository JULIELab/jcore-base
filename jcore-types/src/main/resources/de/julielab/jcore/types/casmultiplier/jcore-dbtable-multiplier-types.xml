<?xml version="1.0" encoding="UTF-8"?>
<typeSystemDescription xmlns="http://uima.apache.org/resourceSpecifier">
    <name>JCoRe File Multiplier Types</name>
    <description>This is a type system for usage with a CAS multiplier. It should not be included into the
        jcore-all-types type system. This particular type system holds a array containing strings that represent the IDs
        of documents to read from a database table. Using an array is used to read batches of document which make
        database access more efficient, for example. Since the primary keys of database tables may have multiple
        elements, a document ID is represented as a StringArray.
    </description>
    <version>2.3.0-SNAPSHOT</version>
    <vendor>JULIE Lab Jena, Germany</vendor>
    <types>
        <typeDescription>
            <name>de.julielab.jcore.types.casmultiplier.RowBatch</name>
            <description>A batch of rows of a database table. An array of identifier strings denotes a documents.
                The name of the table to retrieve the IDs from is another feature of this type. The CAS multiplier
                receiving instances of this type must have access to the correct database.
            </description>
            <supertypeName>uima.tcas.Annotation</supertypeName>
            <features>
                <featureDescription>
                    <name>identifiers</name>
                    <description>The document IDs to be read by the CAS multiplier.</description>
                    <rangeTypeName>uima.cas.FSArray</rangeTypeName>
                    <elementType>uima.cas.StringArray</elementType>
                </featureDescription>
                <featureDescription>
                    <name>tables</name>
                    <description>The tables to read the given IDs from. If there is more than one array entry, the
                        additional tables are joined by primary key to the first table. The first table must always
                        be the document data table. The additional tables might hold annotations segmented away
                        from the base document, for example.</description>
                    <rangeTypeName>uima.cas.StringArray</rangeTypeName>
                </featureDescription>
                <featureDescription>
                    <name>tableSchemas</name>
                    <description>The CoStoSys table schemas of the tables to read.</description>
                    <rangeTypeName>uima.cas.StringArray</rangeTypeName>
                </featureDescription>
                <featureDescription>
                    <name>costosysConfiguration</name>
                    <description>The CoStoSys configuration file path or classpath location.</description>
                    <rangeTypeName>uima.cas.String</rangeTypeName>
                </featureDescription>
            </features>
        </typeDescription>
    </types>
</typeSystemDescription>
