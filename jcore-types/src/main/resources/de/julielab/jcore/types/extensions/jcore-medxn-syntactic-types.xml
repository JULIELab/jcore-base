<?xml version="1.0" encoding="UTF-8"?>
<typeSystemDescription xmlns="http://uima.apache.org/resourceSpecifier">
    <name>jcore-medxn</name>
    <description/>
    <version>1.0</version>
    <vendor/>
  <imports>
    <import name="de.julielab.jcore.types.jcore-morpho-syntax-types"/>
  </imports>
  <types>
    <typeDescription>
      <name>de.julielab.jcore.types.ohnlp.WordToken</name>
      <description>Differentiates a token as being a word rather than a punctuation, symbol, newline, contraction, or number.
Equivalent to OHNLP: org.ohnlp.typesystem.type.syntax.WordToken</description>
      <supertypeName>de.julielab.jcore.types.Token</supertypeName>
      <features>
        <featureDescription>
          <name>capitalization</name>
          <description/>
          <rangeTypeName>uima.cas.Integer</rangeTypeName>
        </featureDescription>
        <featureDescription>
          <name>numPosition</name>
          <description/>
          <rangeTypeName>uima.cas.Integer</rangeTypeName>
        </featureDescription>
        <featureDescription>
          <name>suggestion</name>
          <description/>
          <rangeTypeName>uima.cas.String</rangeTypeName>
        </featureDescription>
        <featureDescription>
          <name>canonicalForm</name>
          <description/>
          <rangeTypeName>uima.cas.String</rangeTypeName>
        </featureDescription>
      </features>
    </typeDescription>
    <typeDescription>
      <name>de.julielab.jcore.types.ohnlp.ContractionToken</name>
      <description>Differentiates a token as being a contraction rather than a punctuation, symbol, newline, word, or number. 
Equivalent to OHNLP: org.ohnlp.typesystem.type.syntax.ContractionToken</description>
      <supertypeName>de.julielab.jcore.types.Token</supertypeName>
    </typeDescription>
  <typeDescription>
      <name>de.julielab.jcore.types.ohnlp.NewlineToken</name>
      <description>Differentiates a token as being a newline rather than a punctuation, symbol, contraction, word, or number. 
Equivalent to OHNLP: org.ohnlp.typesystem.type.syntax.NewlineToken</description>
      <supertypeName>de.julielab.jcore.types.Token</supertypeName>
    </typeDescription>
    <typeDescription>
      <name>de.julielab.jcore.types.ohnlp.NumToken</name>
      <description>Differentiates a token as being a number rather than a punctuation, symbol, newline, word, or contraction. 
Equivalent to OHNLP: org.ohnlp.typesystem.type.syntax.NumToken</description>
      <supertypeName>de.julielab.jcore.types.Token</supertypeName>
      <features>
        <featureDescription>
          <name>numType</name>
          <description/>
          <rangeTypeName>uima.cas.Integer</rangeTypeName>
        </featureDescription>
      </features>
    </typeDescription>
    <typeDescription>
      <name>de.julielab.jcore.types.ohnlp.PunctuationToken</name>
      <description>Differentiates a token as being punctuation rather than a contraction, symbol, newline, word, or number. 
Equivalent to OHNLP: org.ohnlp.typesystem.type.syntax.PunctuationToken</description>
      <supertypeName>de.julielab.jcore.types.Token</supertypeName>
    </typeDescription>
    <typeDescription>
      <name>de.julielab.jcore.types.ohnlp.SymbolToken</name>
      <description>Differentiates a token as being a symbol rather than a punctuation, contraction, newline, word, or number. 
Equivalent to OHNLP: org.ohnlp.typesystem.type.syntax.SymbolToken</description>
      <supertypeName>de.julielab.jcore.types.Token</supertypeName>
    </typeDescription>
  </types>
</typeSystemDescription>
