<?xml version='1.0' encoding='UTF-8'?>
<analysisEngineDescription xmlns="http://uima.apache.org/resourceSpecifier">
    <frameworkImplementation>org.apache.uima.java</frameworkImplementation>
    <primitive>true</primitive>
    <annotatorImplementationName>de.julielab.jcore.consumer.cas2iob.main.ToIOBConsumer</annotatorImplementationName>
    <analysisEngineMetaData>
        <name>JCoRe IOB Writer</name>
        <description>This component help to write CAS entity or chunk annotations into a text file in IOB format.</description>
        <version>2.6.0-SNAPSHOT</version>
        <configurationParameters>
            <configurationParameter>
                <name>outFolder</name>
                <description>Path to folder where IOB-files should be written to.</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>typePath</name>
                <description>The path of the UIMA types, e.g. "de.julielab.jcore." (with terminating "."!). It is prepended to the class names in labelNameMethods. This parameter may be null which is equivalent to the empty String "".</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>labels</name>
                <description>The labels NOT to be exported into IOB format. Label does here not refer to an UIMA type but to the specific label aquired by the labelNameMethod.</description>
                <type>String</type>
                <multiValued>true</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>mode</name>
                <description>This parameter determines whether the IOB or IO annotation schema should be used. The parameter defaults to IOB, the value is not case sensitive.</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>labelNameMethods</name>
                <description>This is the primary parameter to define from which types IOB labels should be derived. The parameter expects pairs of UIMA-annotation-type-names and their corresponding method for extracting the annotation label. Format: &amp;lt;annotationNAme&amp;gt;[\s=/\\|]&amp;lt;method Name&amp;gt;. The annotation name is fully qualified name of the UIMA type. For abbreviation purposes, the "typePath" parameter can be used to define a type prefix that will then be prepended to all UIMA type names given in this parameter. So, for example, the prefix "de.julielab.jcore.types." will allow to use the "specificType" feature of the "de.julielab.jcore.types.Gene" type by providing "Gene=getSpecificType".  If the name of the annotation class itself is to be being used as label, only the class name is expected: &amp;lt;annotationName&amp;gt; (here, again, applies the use of the "typePath" parameter). You also may specify a mix of pairs and single class names. If you give the name extracting method for a class and have also specified its superclass as a single class name, the given method is used rather than the superclass name.</description>
                <type>String</type>
                <multiValued>true</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>iobLabelNames</name>
                <description>Pairs of label names in UIMA (aquired by the methods given in labelNameMethods) and the name the label is supposed to get in the outcoming IOB file. Format: &amp;lt;UIMA label name&amp;gt;[\s=/\\|]&amp;lt;IOB label name&amp;gt;</description>
                <type>String</type>
                <multiValued>true</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>addPos</name>
                <description>If set to true and if annotations of (sub-)type de.julielab.jcore.types.POSTag are present in the CAS, the PoS tags will be added to the output file as the second column. Defaults to false.</description>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>columnSeparator</name>
                <description>The string given with this parameter will be used to separate the columns in the output file. Defaults to a single tab character.</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>iobMarkSeparator</name>
                <description>This string will be used to separate the IO(B) mark - i. e. I or B - from the entity or chunk label in the output file. Defaults to an underscore character.</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
        </configurationParameters>
        <configurationParameterSettings>
            <nameValuePair>
                <name>mode</name>
                <value>
                    <string>IOB</string>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>columnSeparator</name>
                <value>
                    <string>\t</string>
                </value>
            </nameValuePair>
        </configurationParameterSettings>
        <typeSystemDescription>
            <imports>
                <import name="de.julielab.jcore.types.jcore-semantics-mention-types" />
                <import name="de.julielab.jcore.types.jcore-morpho-syntax-types" />
                <import name="de.julielab.jcore.types.jcore-document-structure-types" />
            </imports>
        </typeSystemDescription>
        <fsIndexCollection />
        <capabilities />
        <operationalProperties>
            <modifiesCas>true</modifiesCas>
            <multipleDeploymentAllowed>true</multipleDeploymentAllowed>
            <outputsNewCASes>false</outputsNewCASes>
        </operationalProperties>
    </analysisEngineMetaData>
</analysisEngineDescription>